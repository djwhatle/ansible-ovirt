#! /usr/bin/env python

import time
from ovirtsdk.api import API
from ovirtsdk.xml import params


def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True, timeout=600
    )

    storage = {
        'type': args.storage_type,
        'name': args.storage_name,
        'address': args.storage_address,
        'path': args.storage_path,
    }
    print("Creating {} storage domain".format(storage['type']))
    createStorageDomain(engine_api, storage, args.dc_name)


def parse_args():
    from optparse import OptionParser
    parser = OptionParser()

    parser.add_option('--url', dest='url',
                      help='the url for the Engine api')
    parser.add_option('--username', dest='username',
                      help='the username for the Engine api')
    parser.add_option('--password', dest='password',
                      help='the password for the Engine api')
    parser.add_option('--datacenter', dest='dc_name',
                      help='the name of the target datacenter')
    parser.add_option('--storage-name', dest='storage_name',
                      help='the name of the storage domain')
    parser.add_option('--storage-path', dest='storage_path',
                      help="the path for the storage domain's share")
    parser.add_option('--storage-address', dest='storage_address',
                      help="the address for the storage domain's share")
    parser.add_option('--storage-type', dest='storage_type',
                      help='the type of the storage domain')

    (options, args) = parser.parse_args()

    if not all(options.__dict__.values()):
        print('Not all required options were provided')
        actual = [key for (key, value) in options.__dict__.items() if value]
        print('Got: {}'.format(', '.join(actual)))
        print('Expected: {}'.format(', '.join(options.__dict__.keys())))
        exit(1)
    return options


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return API(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception:
            time.sleep(10)


def createStorageDomain(engine_api, storage, dc_name):
    sd = engine_api.storagedomains.get(name=storage['name'])
    datacenter = engine_api.datacenters.get(dc_name)
    storage_params = params.Storage(
        type_=storage['type'],
        vfs_type=storage['type'],
        address=storage['address'],
        path=storage['path'],
    )
    sdParams = params.StorageDomain(
        name=storage['name'],
        data_center=datacenter,
        type_=storage['type'],
        host=getRunningHost(engine_api),
        storage=storage['name']
    )
    if sd and sd.status and sd.status.state == 'unattached':
        print('Storage: ' + sd.name + ' already exists')
        attachStorageDomain(engine_api, storage_params, datacenter)
    else:
        try:
            if engine_api.storagedomains.add(sdParams):
                print('NFS Storage Domain was created successfully')
                attachStorageDomain(engine_api, storage_params, datacenter)
        except Exception:
            print('%s Domain failed to be created' % storage['name'])
            exit(1)


def attachStorageDomain(engine_api, storage_name, datacenter):
    try:
        storage_domain = engine_api.storagedomains.get(name=storage_name)
        if datacenter.storagedomains.add(storage_domain):
            print '%s Domain was attached successfully' % storage_name
    except Exception as e:
        print 'Failed to attach %s Domain:\n%s' % (storage_name, str(e))
        exit(1)


def getRunningHost(engine_api):
    host_list = engine_api.hosts.list()
    for host in host_list:
        # should add condition to match configured cluster as well
        if host.status.state == 'up':
            return host
    print('Failed to found a host in "up" state')
    exit(1)


if __name__ == '__main__':
    main()
